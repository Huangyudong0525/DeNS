[General]
network = paper

check-signals = false
record-eventlog = false
debug-on-errors = false
result-dir = ./tcp_outsync
sim-time-limit = 4s

rng-class           = cMersenneTwister
seed-0-mt           = 1
#output-scalar-file  = scalars.sca
#output-vector-file  = vectors.vec
#sim-time-limit      = 0s 3600s 1ms
#simtime-resolution  = 10ns

#**.vector-recording = false
#**.scalar-recording = false
#**.result-recording-modes = -


# debug
#**.displayAddresses = true
**.displayAddresses = false
**.verbose = false
**.registerProtocol = true

**.*.clock.clockRate = "1us"

########################################### SNAP  ##########################################################################################
#**.**.eth[*].etherEncapE.useSNAP = true
**.**.eth[*].etherEncap.useSNAP = true
#**.**.eth.etherEncap.useSNAP = true

########################################### Processing Delay ###################################################################################
**.switch*.eth[*].processingDelay.delay= 5us
**.router*.eth[*].processingDelay.delay= 5us


# Modules with xml inputs
########################################### XMLs for gateController; forwarding database is not used. A dummy xml is attahed. ##################

**.filteringDatabase.database = xmldoc("forwardingDummy.xml", "/filteringDatabases/")
**.filteringDatabase.cycle = xmldoc("schedule.xml", "/schedule/")
**.gateController.initialSchedule = xmldoc("schedule.xml")
#**.priority0.trafGenSchedApp.initialSchedule = xmldoc("frame_preemption_detnet_attack_mfd/frame_preemption_detnet_attack_mfd_schedule.xml")
#**.priority1.trafGenSchedApp.initialSchedule = xmldoc("frame_preemption_detnet_attack_mfd/frame_preemption_detnet_attack_mfd_schedule.xml")
#**.priority2.trafGenSchedApp.initialSchedule = xmldoc("frame_preemption_detnet_attack_mfd/frame_preemption_detnet_attack_mfd_schedule.xml")


########################################### Queueing ##########################################################################################

**.gateController.enableHoldAndRelease = false
**.switch*.eth[*].queuing.tsAlgorithms[0].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[1].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[2].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[3].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[4].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[5].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[6].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[7].typename = "StrictPriority"

**.queues[*].bufferCapacity = 363360b
**.queues[*].typename = "QueueDetnet"
**.queues[*].transmissionSelectionAlgorithmModule = "^.tsAlgorithms[" + string(index) + "]"
########################################### Dropper Module ##########################################################################################
#Red Dropper
#**.switch*.eth[*].queuing.dropper.typename="RedDropper"
#**.switch*.eth[*].queuing.dropper.minths="10"
#**.switch*.eth[*].queuing.dropper.maxths="25"
##**.switch*.eth[*].queuing.redDropper.minths="10"
##**.switch*.eth[*].queuing.redDropper.maxths="25"

#Mfd Dropper
**.host*.eth[*].queuing.dropper.typename = ""
**.sink*.eth[*].queuing.dropper.typename = ""

**.switch*.eth[*].queuing.dropper.typename = ""

**.router*.eth[*].queuing.dropper.typename = ""

################################################ Frame Preemption ###########################################################################################

#**.routerA.eth[0].queuing.queues[0].expressQueue = false
#**.routerA.eth[0].queuing.queues[1].expressQueue = false
#**.routerA.eth[0].queuing.queues[2].expressQueue = false
#**.routerA.eth[0].queuing.queues[3].expressQueue = false
#**.routerA.eth[0].queuing.queues[4].expressQueue = false
#**.routerA.eth[0].queuing.queues[5].expressQueue = false
#**.routerA.eth[0].queuing.queues[6].expressQueue = false
#**.routerA.eth[0].queuing.queues[7].expressQueue = true

**.routerA.eth[0].mac.enablePreemptingFrames = false

########################################## Ingress/Egress Traffic COnditioners #############################################################################

**.router*.eth[*].ingressTC.typename = "TCA"
**.router*.eth[*].ingressTC.bind=true
#**.router?.eth[*].etherEncap.typename = "EtherEncapDummy"
**.ingressTC.numClasses = 4
**.ingressTC.classifier.filters = xmldoc("filtersPaper.xml", "//experiment[@id='default']")
**.ingressTC.marker.dscps = "AF11 AF21 AF31 AF41 BE"


**.router*.eth[*].egressTC.typename = "diffservPCP"
**.router*.eth[*].egressTC.numClasses = 4
**.router*.eth[*].egressTC.DscpClassifier.dscps = "AF11 AF21 AF31 AF41"
**.router*.eth[*].egressTC.pcpMarker.MarkPcp0 = 7
**.router*.eth[*].egressTC.pcpMarker.MarkPcp1 = 7
**.router*.eth[*].egressTC.pcpMarker.MarkPcp2 = 6
**.router*.eth[*].egressTC.pcpMarker.MarkPcp3 = 7
**.router*.eth[*].egressTC.pcpMarker.MarkPcp4 = 6

######################################## Applications #####################################################################################################
# Priority Hosts app[0]
**.hostPriority*.numApps = 1
**.hostPriority*.app[0].typename = "UdpBasicApp"
**.hostPriority*.app[0].destPort = 1000
**.hostPriority[*].app[*].startTime = uniform(0s,20us)
**.hostPriority*.app[0].stopTime = 1s
**.hostPriority[*].app[0].sendInterval = 200us
**.hostPriority[*].app[0].messageLength = 350B
**.hostPriority[*].app[0].destAddresses = "sinkPriority[" + string(parentIndex()) + "]"


# X Hosts app[0]
**.hostX[*].numApps = 1
**.hostX[1].app[0].typename = "UdpBasicApp"
**.hostX[1].app[0].destPort = 1000
**.hostX[1].app[*].startTime = 30us
**.hostX[1].app[0].stopTime = 1s
**.hostX[1].app[0].sendInterval = 1.2us
**.hostX[1].app[0].messageLength = 1400B - 4B
**.hostX[1].app[0].destAddresses = "sinkX[" + string(parentIndex()) + "]"

**.hostX[2].app[0].typename = "UdpBasicApp"
**.hostX[2].app[0].destPort = 1000
**.hostX[2].app[*].startTime = 30us
**.hostX[2].app[0].stopTime = 1s
**.hostX[2].app[0].sendInterval = 1.2us
**.hostX[2].app[0].messageLength = 1400B - 4B
**.hostX[2].app[0].destAddresses = "sinkX[" + string(parentIndex()) + "]"


**.hostX[0].app[0].typename = "UdpBasicAppTest"
**.hostX[0].app[0].destPort = 1000
**.hostX[0].app[*].startTime = 30us
**.hostX[0].app[0].stopTime = 1s
**.hostX[0].app[0].sendInterval = 1.2us
**.hostX[0].app[0].messageLength = 1400B - 4B
**.hostX[0].app[0].destAddresses = "sinkX[" + string(parentIndex()) + "]"


**.*Other[*].numApps = 3

# Other Hosts app[0]
**.hostOther[*].app[0].typename = "TcpSessionApp"
**.hostOther[*].app[0].active = true
**.hostOther[*].app[0].localPort = -1
**.hostOther[*].app[0].connectAddress = "sinkOther[" + string(parentIndex()) + "]"
**.hostOther[*].app[0].connectPort = 1000
**.hostOther[*].app[0].tOpen = 50us #uniform(50us,100us)
**.hostOther[*].app[0].sendBytes = 0B
**.hostOther[0].app[0].tstart = 100us
**.hostOther[1].app[0].tstart = 300us
**.hostOther[2].app[0].tstart = 500us
**.hostOther[3].app[0].tstart = 700us
**.hostOther[4].app[0].tstart = 900us
**.hostOther[5].app[0].tstart = 1100us
**.hostOther[6].app[0].tstart = 1300us
**.hostOther[7].app[0].tstart = 1500us
**.hostOther[8].app[0].tstart = 1700us
**.hostOther[9].app[0].tstart = 1900us
**.hostOther[*].app[0].dataSize = 43750000B
**.hostOther[*].app[0].tstop = 1s
**.hostOther[*].app[0].interval = 3us
**.hostOther[*].app[0].numbytes = 1400B - 4B
**.hostOther[*].app[0].sendScript = ""
**.hostOther[*].app[0].tClose = 1s

# Other Sinks app[0]
**.sinkOther[*].app[0].typename = "TcpEchoApp"
**.sinkOther[*].app[0].localPort = 1000
**.sinkOther[*].app[0].echoFactor = 0
**.sinkOther[*].app[0].echoDelay = 0s

**.sinkOther[*].setKind = true
**.hostOther[*].setKind = true

# Other Hosts app[1]
**.hostOther[*].hasUdp = true
**.hostOther[*].app[1].typename = "UdpBasicApp"
**.hostOther[*].app[1].destPort = 1000
**.hostOther[*].app[1].localPort = 1001
**.hostOther[*].app[1].startTime = 0us
**.hostOther[*].app[1].sendInterval = 20us
**.hostOther[*].app[1].messageLength = 350B
**.hostOther[*].app[1].destAddresses = "sinkOther[" + string(parentIndex()) + "]"
**.hostOther[*].app[1].stopTime = 200us

# Other Hosts app[2]
**.hostOther[*].app[2].typename = "UdpSink"
**.hostOther[*].app[2].localPort=1000

# Other Sinks app[1]
**.sinkOther[*].hasUdp = true
**.sinkOther[*].app[1].typename = "UdpBasicApp"
**.sinkOther[*].app[1].destPort = 1000
**.sinkOther[*].app[1].localPort=1001
**.sinkOther[*].app[1].startTime = 0us
**.sinkOther[*].app[1].sendInterval = 20us
**.sinkOther[*].app[1].messageLength = 350B
**.sinkOther[*].app[1].destAddresses = "hostOther[" + string(parentIndex()) + "]%vlan0"
**.sinkOther[*].app[1].stopTime = 200us

# Other Sinks app[2]
**.sinkOther[*].app[2].typename = "UdpSink"
**.sinkOther[*].app[2].localPort=1000

# Priority Sinks app[0]
**.sinkPriority*.numApps = 1
**.sinkPriority*.hasUdp = true
**.sinkPriority*.app[0].typename = "UdpSink"
**.sinkPriority*.app[0].localPort=1000

# X Sinks app[0]
**.sinkX*.numApps = 1
**.sinkX*.hasUdp = true
**.sinkX*.app[0].typename = "UdpSink"
**.sinkX*.app[0].localPort=1000

############################################### Vlan #####################################################################################################

# VLAN8021qEncap present in DeNS module supports PCP, VLAN filtering.
**.**.eth[*].vlanEncap.typename="VLAN8021qEncap"
**.**.eth[*].vlanEncap.vlanTagtype="c"

# Only hosts use vlan interfaces to indicate pcp priority values.
**.host*.numVlanInterfaces = 1

# Priority Hosts
**.hostPriority[*].vlan[*].typename = "DetnetVlanInterface"
**.hostPriority[*].vlan[*].tunnel.vid = 1
**.hostPriority[*].vlan[*].tunnel.pcp = 7

# X Hosts
**.hostX[*].vlan[*].typename = "DetnetVlanInterface"
**.hostX[*].vlan[*].tunnel.vid = 1
**.hostX[0].vlan[*].tunnel.pcp = 7
**.hostX[1].vlan[*].tunnel.pcp = 7
**.hostX[2].vlan[*].tunnel.pcp = 6

# Other Hosts
**.hostOther[*].vlan[*].typename = "DetnetVlanInterface"
**.hostOther[*].vlan[*].tunnel.vid = 1
**.hostOther[*].vlan[*].tunnel.pcp = 6

**.host*.vlan[0].tunnel.realInterfaceName="eth0"

# Configurator assign ip addresses and add routes for flows which are to be routed to vlan interface.
*.configurator.config = xmldoc("configPaper.xml")

############################################### TCP Configuration #####################################################################################################
**.*Other[*].tcp.typename = "Tcp"
**.*Other[*].hasTcp = true
**.*Other[*].tcp.recordStats = true
**.hostOther[*].tcp.tcpAlgorithmClass = "TcpNewReno"
**.sinkOther[*].tcp.tcpAlgorithmClass = "TcpNewReno"
**.hostOther[*].tcp.mss = 1396
# Advertized window is by default 14 times specified mss.
#**.hostOther[*].tcp.advertisedWindow = 20*1396


**.*Other[*].tcp.timestampSupport = false 
**.*Other[*].tcp.sackSupport = false
**.*Other[*].tcp.nagleEnabled = true
**.tcp.increasedIWEnabled = false    
#**.tcp.windowScalingSupport = true
#**.tcp.advertisedWindow = 65535
**.tcp.delayedAcksEnabled = false

**.sinkOther[*].tcp.mss = 0
**.sinkOther[*].tcp.advertisedWindow = 14*1396
#**.hostOther[*].tcp.advertisedWindow = 20*1396
############################################################################################################################################################