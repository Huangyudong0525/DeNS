[General]
network = method

check-signals = false
record-eventlog = false
debug-on-errors = false
result-dir = ./tas_fifo
sim-time-limit = 4s

rng-class           = cMersenneTwister
seed-0-mt           = 1
#output-scalar-file  = scalars.sca
#output-vector-file  = vectors.vec
#sim-time-limit      = 0s 3600s 1ms
#simtime-resolution  = 10ns

#**.vector-recording = false
#**.scalar-recording = false
#**.result-recording-modes = -


# debug
#**.displayAddresses = true
**.displayAddresses = false
**.verbose = false
**.registerProtocol = true

**.*.clock.clockRate = "1us"

########################################### SNAP  ##########################################################################################
#**.**.eth[*].etherEncapE.useSNAP = true
**.**.eth[*].etherEncap.useSNAP = true
#**.**.eth.etherEncap.useSNAP = true

########################################### Processing Delay ###################################################################################
**.switch*.eth[*].processingDelay.delay= 5us
#**.router*.eth[*].processingDelay.delay= 5us


# Modules with xml inputs
########################################### XMLs for gateController; forwarding database is not used. A dummy xml is attahed. ##################

**.filteringDatabase.database = xmldoc("forwardingDummy.xml", "/filteringDatabases/")
**.filteringDatabase.cycle = xmldoc("schedule.xml", "/schedule/")
**.gateController.initialSchedule = xmldoc("schedule.xml")
#**.priority0.trafGenSchedApp.initialSchedule = xmldoc("frame_preemption_detnet_attack_mfd/frame_preemption_detnet_attack_mfd_schedule.xml")
#**.priority1.trafGenSchedApp.initialSchedule = xmldoc("frame_preemption_detnet_attack_mfd/frame_preemption_detnet_attack_mfd_schedule.xml")
#**.priority2.trafGenSchedApp.initialSchedule = xmldoc("frame_preemption_detnet_attack_mfd/frame_preemption_detnet_attack_mfd_schedule.xml")


########################################### Queueing ##########################################################################################

**.gateController.enableHoldAndRelease = false
**.switch*.eth[*].queuing.tsAlgorithms[0].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[1].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[2].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[3].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[4].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[5].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[6].typename = "StrictPriority"
**.switch*.eth[*].queuing.tsAlgorithms[7].typename = "StrictPriority"

**.queues[*].bufferCapacity = 363360b
**.queues[*].typename = "QueueDetnet"
**.queues[*].transmissionSelectionAlgorithmModule = "^.tsAlgorithms[" + string(index) + "]"
########################################### Dropper Module ##########################################################################################
#Red Dropper
#**.switch*.eth[*].queuing.dropper.typename="RedDropper"
#**.switch*.eth[*].queuing.dropper.minths="10"
#**.switch*.eth[*].queuing.dropper.maxths="25"
##**.switch*.eth[*].queuing.redDropper.minths="10"
##**.switch*.eth[*].queuing.redDropper.maxths="25"

#Mfd Dropper
**.host*.eth[*].queuing.dropper.typename = ""
**.sink*.eth[*].queuing.dropper.typename = ""

**.switch*.eth[*].queuing.dropper.typename = ""

**.router*.eth[*].queuing.dropper.typename = ""

################################################ Frame Preemption ###########################################################################################

#**.routerA.eth[0].queuing.queues[0].expressQueue = false
#**.routerA.eth[0].queuing.queues[1].expressQueue = false
#**.routerA.eth[0].queuing.queues[2].expressQueue = false
#**.routerA.eth[0].queuing.queues[3].expressQueue = false
#**.routerA.eth[0].queuing.queues[4].expressQueue = false
#**.routerA.eth[0].queuing.queues[5].expressQueue = false
#**.routerA.eth[0].queuing.queues[6].expressQueue = false
#**.routerA.eth[0].queuing.queues[7].expressQueue = true

#**.routerA.eth[0].mac.enablePreemptingFrames = false

########################################## Ingress/Egress Traffic COnditioners #############################################################################

#**.router*.eth[*].ingressTC.typename = "TCA"
#**.router*.eth[*].ingressTC.bind=true
##**.router?.eth[*].etherEncap.typename = "EtherEncapDummy"
#**.ingressTC.numClasses = 4
#**.ingressTC.classifier.filters = xmldoc("filtersPaper.xml", "//experiment[@id='default']")
#**.ingressTC.marker.dscps = "AF11 AF21 AF31 AF41 BE"
#
#
#**.router*.eth[*].egressTC.typename = "diffservPCP"
#**.router*.eth[*].egressTC.numClasses = 4
#**.router*.eth[*].egressTC.DscpClassifier.dscps = "AF11 AF21 AF31 AF41"
#**.router*.eth[*].egressTC.pcpMarker.MarkPcp0 = 7
#**.router*.eth[*].egressTC.pcpMarker.MarkPcp1 = 7
#**.router*.eth[*].egressTC.pcpMarker.MarkPcp2 = 6
#**.router*.eth[*].egressTC.pcpMarker.MarkPcp3 = 7
#**.router*.eth[*].egressTC.pcpMarker.MarkPcp4 = 6

######################################## Applications #####################################################################################################
# Priority Hosts app[0]
**.hostPriority*.numApps = 1
**.hostPriority*.app[0].typename = "UdpBasicApp"
**.hostPriority*.app[0].destPort = 1000
**.hostPriority[*].app[*].startTime = uniform(5us,20us)
**.hostPriority*.app[0].stopTime = 1s
**.hostPriority[*].app[0].sendInterval = 200us
**.hostPriority[*].app[0].messageLength = 350B
**.hostPriority[*].app[0].destAddresses = "sinkPriority[" + string(parentIndex()) + "]"


# X Hosts app[0]
**.hostX[*].numApps = 1
**.hostX[1].app[0].typename = "UdpBasicApp"
**.hostX[1].app[0].destPort = 1000
**.hostX[1].app[*].startTime = 25us
**.hostX[1].app[0].stopTime = 1s
**.hostX[1].app[0].sendInterval = 200us
**.hostX[1].app[0].messageLength = 350B
**.hostX[1].app[0].destAddresses = "sinkX[" + string(parentIndex()) + "]"

**.hostX[2].app[0].typename = "UdpBasicApp"
**.hostX[2].app[0].destPort = 1000
**.hostX[2].app[*].startTime = 30us
**.hostX[2].app[0].stopTime = 1s
**.hostX[2].app[0].sendInterval = 1.2us
**.hostX[2].app[0].messageLength = 1400B - 4B
**.hostX[2].app[0].destAddresses = "sinkX[" + string(parentIndex()) + "]"


**.hostX[0].app[0].typename = "UdpBasicAppTest"
**.hostX[0].app[0].destPort = 1000
**.hostX[0].app[*].startTime = 30us
**.hostX[0].app[0].stopTime = 1s
**.hostX[0].app[0].sendInterval = 1.2us
**.hostX[0].app[0].messageLength = 1400B - 4B
**.hostX[0].app[0].destAddresses = "sinkX[" + string(parentIndex()) + "]"



# Priority Sinks app[0]
**.sinkPriority*.numApps = 1
**.sinkPriority*.hasUdp = true
**.sinkPriority*.app[0].typename = "UdpSink"
**.sinkPriority*.app[0].localPort=1000

# X Sinks app[0]
**.sinkX*.numApps = 1
**.sinkX*.hasUdp = true
**.sinkX*.app[0].typename = "UdpSink"
**.sinkX*.app[0].localPort=1000

############################################### Vlan #####################################################################################################

# VLAN8021qEncap present in DeNS module supports PCP, VLAN filtering.
**.**.eth[*].vlanEncap.typename="VLAN8021qEncap"
**.**.eth[*].vlanEncap.vlanTagtype="c"

# Only hosts use vlan interfaces to indicate pcp priority values.
**.host*.numVlanInterfaces = 1

# Priority Hosts
**.hostPriority[*].vlan[*].typename = "DetnetVlanInterface"
**.hostPriority[*].vlan[*].tunnel.vid = 1
**.hostPriority[*].vlan[*].tunnel.pcp = 7

# X Hosts
**.hostX[*].vlan[*].typename = "DetnetVlanInterface"
**.hostX[*].vlan[*].tunnel.vid = 1
**.hostX[0].vlan[*].tunnel.pcp = 7
**.hostX[1].vlan[*].tunnel.pcp = 7
**.hostX[2].vlan[*].tunnel.pcp = 6



**.host*.vlan[0].tunnel.realInterfaceName="eth0"

# Configurator assign ip addresses and add routes for flows which are to be routed to vlan interface.
*.configurator.config = xmldoc("configPaper.xml")

############################################### TCP Configuration #####################################################################################################
#**.*Other[*].tcp.typename = "Tcp"
#**.*Other[*].hasTcp = true
#**.*Other[*].tcp.recordStats = true
#**.hostOther[*].tcp.tcpAlgorithmClass = "TcpNewReno"
#**.sinkOther[*].tcp.tcpAlgorithmClass = "TcpNewReno"
#**.hostOther[*].tcp.mss = 1396
## Advertized window is by default 14 times specified mss.
##**.hostOther[*].tcp.advertisedWindow = 20*1396
#
###### Fucking timestampSupport. Wasted a week to understand whats going wrong. In the end, found out that timestamp option is only 32 bits which has millisecond precision.
###### Not suggested to enable for these experiments. RTT is anyway calculated by tcp using simtime.
###### It is known that drops occurs every 150us due to gates closing. In this case, if the timestamp used in RTT calculation is of precision milliseconds,
###### the RTO is drastically effected, essentially dropping the throughput to zero for large amount of time (in the scale of simulation time).
#**.*Other[*].tcp.timestampSupport = false 
#**.*Other[*].tcp.sackSupport = false
#**.*Other[*].tcp.nagleEnabled = true
#**.tcp.increasedIWEnabled = false    
##**.tcp.windowScalingSupport = true
##**.tcp.advertisedWindow = 65535
#**.tcp.delayedAcksEnabled = false
#
#**.sinkOther[*].tcp.mss = 0
#**.sinkOther[*].tcp.advertisedWindow = 14*1396
##**.hostOther[*].tcp.advertisedWindow = 20*1396
############################################################################################################################################################